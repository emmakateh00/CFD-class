import numpy as np
import sympy as sy
import math


# Part 1: Forward, Backward, and Central Differences
def derivative(f, x, method, h):
    if method == 'central':
        return (f(x + h)) - (f(x - h))/(2*h)
    elif method == 'forward':
        return (f(x + h) - f(x))/h
    elif method == 'backward':
        return (f(x) - f(x - h))/h
    else:
        print("Method must be central, forward, or backward.")

x = sy.Symbol('x')
f = math.exp(x)/((math.sin(x))**(3)+(math.cos(x))**(3))
h = 0.1
s = 1
x = math.pi/4

while s < 30:
    print("h:", h, 'central:', derivative(f, x, 'central', h), "forward:", derivative(f, x, 'forward', h), "backward:", derivative(f, x, 'backward', h))
    h = h/2
    s = s + 1


# Part 2: CTSE
def factorial(n):
    if n <= 0:
        return 1
    else:
        return n*factorial(n-1)

def taylor(f, x0, n):
    i = 0
    p = 0
    while i <= n:
        p = p + (f.diff(x, i).subs(x, x0))/(factorial(i))*(x-x0)**i
        i += 1
    return p

n = 0
x0 = 1

print(taylor(f, 2, n))


## Part 3: Compare values of the derivative with the exact value and report percent error







##x = np.linspace(0,5*np.pi,100)
##dydx = derivative(np.sin, x, 'central', 0.01)

##dYdx = np.cos(x)

##plt.figure(figsize=(12,5))
##plt.plot(x,dydx,'r.',label='Central Difference')
##plt.plot(x,dYdx,'b',label='True Value')

##plt.title('Central Difference Derivative of y = cos(x)')
##plt.legend(loc='best')
##plt.show()
